{
  "name": "hilary",
  "version": "2.0.0",
  "description": "hilary is a simple JavaScript IoC container written for Node.js and the browser",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Acatar/hilaryjs.git"
  },
  "keywords": [
    "dependency",
    "injection",
    "injector",
    "inversion",
    "control",
    "IoC",
    "DI",
    "node",
    "javascript",
    "autowire",
    "configuration",
    "low",
    "ceremony"
  ],
  "author": {
    "name": "Andy Wright",
    "email": "andes.collab@gmail.com",
    "url": "https://github.com/losandes"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/Acatar/hilaryjs/issues"
  },
  "homepage": "https://github.com/Acatar/hilaryjs",
  "readme": "hilary.js\n========\n\nHilary is an easy to use JavaScript IoC container written for Node.js and the browser.  Hilary's aim is to deliver low-ceremony dependency injection, to aid in decoupling JavaScript modules and testing.  It's named after Hilary Page, who designed building blocks that later became known as Legos.\n\nYou can find documentation and examples on our [wiki](https://github.com/Acatar/hilaryjs/wiki). Below is just a quick-start.\n\nCreating your First Node App with Hilary\n========\nInstall Hilary:\n\n```\nnpm install hilary\n```\n\nIn your startup file, require Hilary, create a new scope, and compose your app.\n\n```JavaScript\n// startup.js\nvar Hilary = require('hilary'),\n    scope = new Hilary(),\n    compose,\n    start;\n\ncompose = function (scope) {\n    \"use strict\";\n\n    scope.register({\n        name: 'http',\n        factory: function () {\n            var isWin = /^win/.test(process.platform);\n            \n            if (isWin) {\n                // take advantage of the httpsys performance enhancements\n                return require('httpsys');\n            } else {\n                // otherwise, stick with the standard http module\n                return require('http');\n            }\n        }\n    });\n    scope.register(require('./www.js'));\n};\n\nstart = function () {\n    \"use strict\";\n\n    compose(scope);\n    scope.resolve('server');\n};\n\nstart();\n```\n\n```JavaScript\n// www.js\nmodule.exports.name = 'server';\nmodule.exports.dependencies = ['http'];\nmodule.exports.factory = function (http) {\n    \"use strict\";\n    \n    http.createServer(function (req, res) {\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('Hello World\\n');\n    }).listen(1337, '127.0.0.1');\n\n    console.log('Server running at http://127.0.0.1:1337/');\n    \n    return http;\n};\n```\n\nCreating your First Browser App with Hilary\n========\n\nAdd a script reference to Hilary before you load your modules:\n\n```HTML\n<script src=\"hilary.min.js\"></script>\n```\n\nThen define your scope, then your modules and finally compose your app:\n\n```JavaScript\n// spa.js\n(function (exports, Hilary) {\n    \"use strict\";\n    \n    exports.spa = new Hilary();\n}(window, Hilary));\n```\n\n```JavaScript\n// myModule.js\nspa.register({\n    name: 'myRouteEngine',\n    dependencies: ['myFactory'],\n    factory: function (myFactory) {\n        \"use strict\";\n\n        // [CODE]\n    }\n});\n```\n\n```JavaScript\n// bootstrapper.js\n(function (spa) {\n    \"use strict\";\n    \n    var compose,\n        start;\n    \n    compose = function (scope) {\n        scope.register({\n            name: 'myFactory',\n            factory: function () {\n                \"use strict\";\n\n                // [CODE]\n            }\n        });\n    };\n    \n    start = function () {\n        compose(spa);\n        resolve('myRouteEngine');\n    };\n    \n    start();\n}(spa));\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "977c612d4c1f77039e56ca68948a5555c19a5e70",
  "_id": "hilary@2.0.0",
  "_shasum": "521dde049b2f3ee1a8c687473a14369743a0d347",
  "_from": "hilary@*"
}
